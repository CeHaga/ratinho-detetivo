//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputsActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputsActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputsActions"",
    ""maps"": [
        {
            ""name"": ""Walking"",
            ""id"": ""19063f75-723d-4868-8449-34721b98ae04"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b5d91502-474e-4124-87e8-be2c69252efb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""93646a00-4f25-4ff5-9f15-e1644f79ddc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Diary"",
                    ""type"": ""Button"",
                    ""id"": ""9a5f1582-a206-4f83-9b38-bd59a400b287"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Minigame"",
                    ""type"": ""Button"",
                    ""id"": ""5506c53c-e569-466f-ae9a-e925dd2671fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""84c5af4e-dacd-43fa-a9c9-3a95e6f60769"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""deb6f884-1ebf-40b1-afbb-a41f4c5cdfd6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b4fe71fc-ec7f-42c2-970a-e2a4e2085aa0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3164ea73-5a0d-4883-9036-d89c1ed3760f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7705457-7ad9-432d-98fe-87a92317bc86"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""880fef46-9285-42c1-8135-91fd4e132da7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0287dc70-71c0-40aa-9541-a5ece527f068"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Diary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78910e09-64e4-46ac-89b3-1dbbb197931d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Minigame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""b57c3d0b-862b-4eae-a98a-1cc84f86fd8f"",
            ""actions"": [
                {
                    ""name"": ""InteractDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""88631de5-93d5-44e9-9bb4-57141f1b8f73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""10c2202f-c966-492d-b9bd-1670fa956995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9865d71e-ad9e-4b04-aefc-6d756d8a3c58"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""InteractDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ChooseAxis"",
                    ""id"": ""62f49380-6b00-4386-b7af-f238d0575c26"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseDialogue"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""30090836-ca94-4e72-87b4-6a41ee0f93e6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e4056ce9-4f85-48bc-a85d-912b96a69f48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Walking
        m_Walking = asset.FindActionMap("Walking", throwIfNotFound: true);
        m_Walking_Movement = m_Walking.FindAction("Movement", throwIfNotFound: true);
        m_Walking_Interact = m_Walking.FindAction("Interact", throwIfNotFound: true);
        m_Walking_Diary = m_Walking.FindAction("Diary", throwIfNotFound: true);
        m_Walking_Minigame = m_Walking.FindAction("Minigame", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_InteractDialogue = m_Dialogue.FindAction("InteractDialogue", throwIfNotFound: true);
        m_Dialogue_ChooseDialogue = m_Dialogue.FindAction("ChooseDialogue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Walking
    private readonly InputActionMap m_Walking;
    private IWalkingActions m_WalkingActionsCallbackInterface;
    private readonly InputAction m_Walking_Movement;
    private readonly InputAction m_Walking_Interact;
    private readonly InputAction m_Walking_Diary;
    private readonly InputAction m_Walking_Minigame;
    public struct WalkingActions
    {
        private @PlayerInputsActions m_Wrapper;
        public WalkingActions(@PlayerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Walking_Movement;
        public InputAction @Interact => m_Wrapper.m_Walking_Interact;
        public InputAction @Diary => m_Wrapper.m_Walking_Diary;
        public InputAction @Minigame => m_Wrapper.m_Walking_Minigame;
        public InputActionMap Get() { return m_Wrapper.m_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void SetCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnInteract;
                @Diary.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnDiary;
                @Diary.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnDiary;
                @Diary.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnDiary;
                @Minigame.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMinigame;
                @Minigame.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMinigame;
                @Minigame.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMinigame;
            }
            m_Wrapper.m_WalkingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Diary.started += instance.OnDiary;
                @Diary.performed += instance.OnDiary;
                @Diary.canceled += instance.OnDiary;
                @Minigame.started += instance.OnMinigame;
                @Minigame.performed += instance.OnMinigame;
                @Minigame.canceled += instance.OnMinigame;
            }
        }
    }
    public WalkingActions @Walking => new WalkingActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private IDialogueActions m_DialogueActionsCallbackInterface;
    private readonly InputAction m_Dialogue_InteractDialogue;
    private readonly InputAction m_Dialogue_ChooseDialogue;
    public struct DialogueActions
    {
        private @PlayerInputsActions m_Wrapper;
        public DialogueActions(@PlayerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractDialogue => m_Wrapper.m_Dialogue_InteractDialogue;
        public InputAction @ChooseDialogue => m_Wrapper.m_Dialogue_ChooseDialogue;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterface != null)
            {
                @InteractDialogue.started -= m_Wrapper.m_DialogueActionsCallbackInterface.OnInteractDialogue;
                @InteractDialogue.performed -= m_Wrapper.m_DialogueActionsCallbackInterface.OnInteractDialogue;
                @InteractDialogue.canceled -= m_Wrapper.m_DialogueActionsCallbackInterface.OnInteractDialogue;
                @ChooseDialogue.started -= m_Wrapper.m_DialogueActionsCallbackInterface.OnChooseDialogue;
                @ChooseDialogue.performed -= m_Wrapper.m_DialogueActionsCallbackInterface.OnChooseDialogue;
                @ChooseDialogue.canceled -= m_Wrapper.m_DialogueActionsCallbackInterface.OnChooseDialogue;
            }
            m_Wrapper.m_DialogueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InteractDialogue.started += instance.OnInteractDialogue;
                @InteractDialogue.performed += instance.OnInteractDialogue;
                @InteractDialogue.canceled += instance.OnInteractDialogue;
                @ChooseDialogue.started += instance.OnChooseDialogue;
                @ChooseDialogue.performed += instance.OnChooseDialogue;
                @ChooseDialogue.canceled += instance.OnChooseDialogue;
            }
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IWalkingActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnDiary(InputAction.CallbackContext context);
        void OnMinigame(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnInteractDialogue(InputAction.CallbackContext context);
        void OnChooseDialogue(InputAction.CallbackContext context);
    }
}
